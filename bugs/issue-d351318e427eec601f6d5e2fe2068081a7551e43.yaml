--- !ditz.rubyforge.org,2008-03-06/issue 
title: fix function instance refcount collection to deal with prototype reference loop
desc: |-
  If there is some easy fix, this should be attempted: a majority of plain
  functions don't even need the automatic prototype object so it shouldn't
  prevent collection.
  
  A few approaches:
  
  * Implement a "dirty" bit for objects.  If the prototype object (and
    function object) are not dirty, we can be sure that the reference loop
    can be broken internally.  Internal code can then e.g. set f.prototype
    to null and resume normal collection.
  
  * If function prototype object "autospawning" is implemented, this can
    also be used to detect that the prototype object hasn't been created
    (because it hasn't been needed), so the function would be collectable.
type: :task
component: duk
release: v1.2
reporter: sva <sami.vaarala@iki.fi>
status: :unstarted
disposition: 
creation_time: 2014-03-14 15:19:24.301647 Z
references: []

id: d351318e427eec601f6d5e2fe2068081a7551e43
log_events: 
- - 2014-03-14 15:19:24.541523 Z
  - sva <sami.vaarala@iki.fi>
  - created
  - ""
- - 2014-09-26 20:43:37.510818 Z
  - Sami Vaarala <sami.vaarala@iki.fi>
  - assigned to release v1.1 from unassigned
  - ""
- - 2014-11-02 00:13:49.029578 Z
  - Sami Vaarala <sami.vaarala@iki.fi>
  - assigned to release v1.2 from v1.1
  - ""
