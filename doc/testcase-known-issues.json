[
  { "comment": "Ecmascript testcase (ecmascript-testcases/) known issues" },

  { "test": "test-bi-date-tzoffset-brute-fi.js", "knownissue": "year 1970 deviates from expected, Duktape uses equiv. year for 1970 on purpose at the moment" },
  { "test": "test-bi-global-parseint.js", "knownissue": "rounding differences for parsing integers larger than 2^53" },
  { "test": "test-bi-global-parseint-oct.js", "knownissue": "non-standard octal behavior does not match V8/Rhino" },
  { "test": "test-bi-json-dec-types.js", "knownissue": "'\\x' should be allowed by eval() but not by JSON.parse(), Duktape rejects '\\x' in both" },
  { "test": "test-bi-json-enc-proplist-dups.js", "knownissue": "JSON.stringify() can be given a property list to serialize; duplicates should be eliminated but Duktape (and other engines) will happily serialize a property multiple times" },
  { "test": "test-bi-number-proto-toexponential.js", "knownissue": "corner case rounding errors in toExponential()" },
  { "test": "test-bi-number-proto-tostring.js", "knownissue": "expect strings to be checked, but probably Duktape rounding issues" },
  { "test": "test-bi-regexp-gh39.js", "knownissue": "requires leniency for non-standard regexps" },
  { "test": "test-bug-date-timeval-edges.js", "knownissue": "test case depends on current timezone offset" },
  { "test": "test-bug-enum-shadow-nonenumerable.js", "knownissue": "corner case enumeration semantics, not sure what correct behavior is (test262 ch12/12.6/12.6.4/12.6.4-2)" },
  { "test": "test-bug-error-linenumber-2.js", "knownissue": "in corner cases (related to automatic semicolon insertion) throw statement error linenumber can be unexpected" },
  { "test": "test-bug-invalid-oct-as-dec.js", "knownissue": "V8/Rhino parse invalid octal constants as decimal values, Duktape doesn't at the moment" },
  { "test": "test-bug-json-parse-__proto__.js", "knownissue": "when ES6 __proto__ enabled, JSON.parse() parses '__proto__' property incorrectly when a specially crafted reviver is used" },
  { "test": "test-bug-numconv-1e23.js", "knownissue": "corner case in floating point parse rounding" },
  { "test": "test-bug-numconv-denorm-toprec.js", "knownissue": "in a denormal corner case toPrecision() can output a zero leading digit" },
  { "test": "test-bug-tonumber-u0000.js", "knownissue": "'\\u0000' should ToNumber() coerce to NaN, but now coerces to zero like an empty string" },
  { "test": "test-bug-trycatch-many-constants.js", "knownissue": "out of regs for try-catch in functions with a lot of constants" },
  { "test": "test-conv-number-tostring-tonumber-roundtrip.js", "knownissue": "rounding corner cases" },
  { "test": "test-dev-bound-thread-start-func.js", "knownissue": "initial function of a new coroutine cannot be bound" },
  { "test": "test-dev-func-cons-args.js", "knownissue": "corner cases for 'new Function()' when arguments and code are given as strings" },
  { "test": "test-dev-yield-after-callapply.js", "knownissue": "yield() not allowed when function called via Function.prototype.(call|apply)()" },
  { "test": "test-lex-unterminated-hex-uni-escape.js", "knownissue": "unterminated hex escapes should be parsed leniently, e.g. '\\uX' -> 'uX' but Duktape now refuses to parse them" },
  { "test": "test-numconv-parse-misc.js", "knownissue": "rounding corner case for 1e+23 (parses/prints as 1.0000000000000001e+23)" },
  { "test": "test-numconv-tostring-gen.js", "knownissue": "rounding corner cases in number-to-string coercion" },
  { "test": "test-numconv-tostring-misc.js", "knownissue": "rounding corner case, 1e+23 string coerces to 1.0000000000000001e+23" },
  { "test": "test-regexp-empty-quantified.js", "knownissue": "a suitable empty quantified (e.g. '(x*)*') causes regexp parsing to terminate due to step limit" },
  { "test": "test-regexp-invalid-charclass.js", "knownissue": "some invalid character classes are accepted (e.g. '[\\d-z]' and '[z-x]')" },
  { "test": "test-regexp-nonstandard-patternchar.js", "knownissue": "other engines allow an unescaped brace to appear literally (e.g. /{/), Duktape does not (which seems correct but is against real world behavior)" },
  { "test": "test-stmt-for-in-lhs.js", "knownissue": "for-in allows some invalid left-hand-side expressions which cause a runtime ReferenceError instead of a compile-time SyntaxError (e.g. 'for (a+b in [0,1]) {...}')" },

  { "comment": "Ecmascript testcases that need special options or environment to work" },

  { "test": "test-bi-date-local-parts-fi.js", "specialoptions": "test case has been written for Finnish locale" },
  { "test": "test-bi-date-tzoffset-basic-fi.js", "specialoptions": "test case has been written for Finnish locale" },
  { "test": "test-bi-date-tzoffset-brute-fi.js", "specialoptions": "test case has been written for Finnish locale" },
  { "test": "test-bi-duktape-json-lightfunc.js", "specialoptions": "DUK_OPT_LIGHTFUNC_BUILTINS" },
  { "test": "test-bi-function-nonstd-caller-prop.js", "specialoptions": "DUK_OPT_NONSTD_FUNC_CALLER_PROPERTY" },
  { "test": "test-dev-16bit-overflows.js", "specialoptions": "requires 16-bit field options" },
  { "test": "test-dev-lightfunc-accessor.js", "specialoptions": "DUK_OPT_LIGHTFUNC_BUILTINS" },
  { "test": "test-dev-lightfunc-finalizer.js", "specialoptions": "DUK_OPT_LIGHTFUNC_BUILTINS" },
  { "test": "test-dev-lightfunc.js", "specialoptions": "DUK_OPT_LIGHTFUNC_BUILTINS" },
  { "test": "test-dev-logicalnot-refcount.js", "specialoptions": "requires refcounting" },
  { "test": "test-dev-nonstd-setget-key-argument.js", "specialoptions": "should work with default options, but will break with DUK_OPT_NO_NONSTD_ACCESSOR_KEY_ARGUMENT" },

  { "comment": "API testcase known issues" },

  { "test": "test-to-number.c",  "knownissue": "number parsing bug for strings containing NUL characters (e.g. '\\u0000')" }
]
